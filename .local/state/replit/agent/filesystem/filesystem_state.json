{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack hotel IT infrastructure management system called \"Vigon Systems\" built with modern web technologies. The application provides real-time monitoring and management capabilities for hotel IT systems including WiFi networks, IPTV systems, security cameras, and power consumption. It features a comprehensive dashboard with AI-powered chatbot assistance, voice command capabilities, and WebSocket-based real-time updates for system metrics and alerts.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\nThe frontend is built using **React 18** with **TypeScript** and uses modern React patterns:\n\n- **Routing**: Uses `wouter` for client-side routing with a single-page application approach\n- **State Management**: Leverages React Query (`@tanstack/react-query`) for server state management with automatic caching, background updates, and optimistic updates\n- **UI Framework**: Built with **shadcn/ui** components using Radix UI primitives and Tailwind CSS for consistent, accessible design\n- **Build Tool**: Uses **Vite** for fast development and optimized production builds\n- **Styling**: Tailwind CSS with custom CSS variables for theming and design system consistency\n\nThe application follows a component-based architecture with clear separation between dashboard components, UI primitives, and business logic hooks.\n\n## Backend Architecture\n\nThe backend is built as a **Node.js REST API** using **Express.js**:\n\n- **API Design**: RESTful endpoints for dashboard data, system metrics, alerts, and chat functionality\n- **Real-time Communication**: WebSocket server integration for live system updates and notifications\n- **Data Layer**: Uses an abstract storage interface (`IStorage`) with in-memory implementation, designed to be easily swapped with database persistence\n- **AI Integration**: OpenAI API integration for intelligent chat responses and voice command processing\n- **Development Setup**: Uses `tsx` for TypeScript execution in development with hot reloading\n\n## Data Storage Solutions\n\nCurrently implements **in-memory storage** with a well-defined interface that can be easily replaced:\n\n- **Schema Definition**: Uses Drizzle ORM schemas with PostgreSQL dialect for future database migration\n- **Data Models**: Comprehensive models for users, system metrics, network performance, alerts, power consumption, and chat messages\n- **Migration Ready**: Drizzle configuration is set up for PostgreSQL with migration support\n\nThe storage abstraction allows for easy transition from development (in-memory) to production (database) environments.\n\n## Authentication and Authorization\n\n- **User Management**: Basic user system with role-based access (admin role default)\n- **Session Handling**: Uses `connect-pg-simple` for PostgreSQL-based session storage when database is connected\n- **Security**: Prepared for production authentication with password hashing and session management\n\n## Real-time Features\n\n- **WebSocket Integration**: Bidirectional communication for live dashboard updates\n- **Voice Commands**: Browser-based speech recognition for hands-free system control\n- **Auto-refresh**: Automatic data polling with configurable intervals for different data types\n- **Live Notifications**: Real-time alert system with WebSocket-based delivery\n\n# External Dependencies\n\n## Third-party Services\n\n- **OpenAI API**: For AI chatbot responses and natural language processing of voice commands\n- **Neon Database**: PostgreSQL database service (configured via `@neondatabase/serverless`)\n\n## Key Libraries\n\n- **UI Components**: Complete shadcn/ui component library with Radix UI primitives\n- **Data Fetching**: React Query for sophisticated server state management\n- **Database**: Drizzle ORM with PostgreSQL dialect and Zod schema validation\n- **Styling**: Tailwind CSS with class variance authority for component variants\n- **Date Handling**: date-fns for consistent date formatting and manipulation\n- **Development Tools**: Vite with React plugin and Replit integration for development environment\n\n## Browser APIs\n\n- **Speech Recognition**: Uses Web Speech API (webkitSpeechRecognition) for voice command functionality\n- **WebSocket**: Native WebSocket API for real-time communication\n- **Local Storage**: Browser storage for user preferences and session data\n\nThe architecture is designed to be modular and scalable, with clear separation of concerns and easy extensibility for additional hotel IT systems and monitoring capabilities.","size_bytes":4553},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        vigon: {\n          blue: \"var(--vigon-blue)\",\n          light: \"var(--vigon-light)\",\n          dark: \"var(--vigon-dark)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2401},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/content-1755799690368.md":{"content":"Français\n\n![Vigon Systems](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/logos/color-1736899024753-0.5219336404716874.png)\n\n1\n\n0\n\n0\n\n0\n\n0\n\n1\n\n1\n\n0\n\n1\n\n0\n\n1\n\n0\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n0\n\n0\n\n1\n\n1\n\n0\n\n0\n\n0\n\n0\n\n0\n\n# Votre Partenaire Technologique de Confiance\n\nDepuis 2014, VIGON SYSTEMS transforme l'infrastructure IT des entreprises marocaines et africaines avec expertise et innovation.\n\n![Vigon Systems](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/logos/white-1736899025429-0.8403567459832497.png)\n\nContactez-nousNos Services\n\nSimuler votre leasing IT\n\n### 0\n\nClients Satisfaits\n\n### 0\n\nProjets Accomplis\n\n### 0\n\nSolutions Installées\n\n### 0\n\nÉquipements en Maintenance\n\n## Nos Services\n\nDes solutions IT complètes pour répondre à tous vos besoins technologiques\n\n### Services Hôteliers Premium\n\n![hoist](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/logos/hoist-0.7673315224726998.png)\n\nCertifié LSP (Licensed Solution Provider) par les plus grandes chaînes hôtelières mondiales\n\nAccor • Marriott • Hilton • et plus encore\n\n![Accor](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/logos/hospitality-0.6655237024923557.png)![Marriott](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/logos/hospitality-0.9835335427320799.png)![Hyatt](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/logos/hospitality-0.14524291211266216.png)![Radisson](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/logos/hospitality-0.7374073723925443.png)\n\n![Hospitality IPTV](https://images.unsplash.com/photo-1522869635100-9f4c5e86aa37?ixlib=rb-1.2.1&auto=format&fit=crop&w=1500&q=80)\n\n### Hospitality IPTV\n\nSolutions IPTV de pointe fournies par Hoist Group avec technologie Chromecast intégrée pour une expérience de divertissement hôtelière exceptionnelle\n\n- TV Interactive\n- Video à la demande\n- Guide des programmes\n- Chromecast intégré\n\nPowered by Hoist Group\n\n![WIFI](https://images.unsplash.com/photo-1563013544-824ae1b704d3?ixlib=rb-1.2.1&auto=format&fit=crop&w=1500&q=80)\n\n### WIFI\n\nInfrastructure WiFi haute performance par Hoist Group, optimisée pour le secteur hôtelier\n\n- Couverture complète\n- Gestion centralisée\n- Support 24/7\n\nPowered by Hoist Group\n\n![HSIA](https://images.unsplash.com/photo-1551882547-ff40c63fe5fa?ixlib=rb-1.2.1&auto=format&fit=crop&w=1500&q=80)\n\n### HSIA\n\nAccès Internet haut débit (HSIA) fourni par Hoist Group pour une connectivité rapide et fiable\n\n- Haute vitesse\n- Bande passante dédiée\n- QoS avancé\n\nPowered by Hoist Group\n\n### Vidéosurveillance\n\nSystèmes CCTV HD et solutions de sécurité avec analyse vidéo intelligente et stockage sécurisé\n\n- Haute définition\n- Analyse vidéo\n- Stockage cloud\n\n### Téléphonie IP\n\nSolutions de téléphonie IP modernes avec fonctionnalités avancées pour une communication professionnelle efficace\n\n- VoIP avancé\n- Intégration CRM\n- Messagerie unifiée\n\n### Détection Incendie\n\nSystèmes de détection et d'alarme incendie conformes aux normes internationales de sécurité\n\n- Détection précoce\n- Alertes automatiques\n- Maintenance préventive\n\n### Sécurité IT\n\nProtection avancée contre les cybermenaces avec pare-feu nouvelle génération et solutions antivirus\n\n- Pare-feu\n- Antivirus\n- Cryptage\n\n### Infrastructure IT\n\nSolutions complètes d'infrastructure réseau, serveurs et stockage pour optimiser vos opérations\n\n- Serveurs\n- Stockage\n- Virtualisation\n\n### Infrastructure Réseau\n\nConception et déploiement de réseaux d'entreprise performants et sécurisés avec support proactif\n\n- Switches\n- Routeurs\n- Câblage\n\n### Contrôle d'Accès\n\nSystèmes de contrôle d'accès électronique pour une sécurité optimale des locaux\n\n- Badges\n- Biométrie\n- Historique\n\n### Solutions d'Impression\n\nServices d'impression gérés et solutions de numérisation professionnelles intégrées\n\n- Impression\n- Numérisation\n- Archivage\n\n### Services Cloud\n\nSolutions cloud sécurisées pour la transformation digitale de votre entreprise\n\n- SaaS\n- IaaS\n- Backup\n\n### Gestion de Données\n\nSolutions de gestion et d'analyse de données pour optimiser vos processus métier\n\n- Stockage\n- Analyse\n- Protection\n\n### Business Intelligence\n\nOutils d'analyse et de reporting pour une prise de décision éclairée\n\n- Tableaux de bord\n- Rapports\n- KPIs\n\n## Les investissements IT traditionnels en CAPEX peuvent être lourds.\n\nVIGON SYSTEMS propose des solutions en mode OPEX, flexibles, rentables et évolutives.\n\n### Flexibilité maximale :\n\nAdaptez vos besoins IT à la croissance de votre activité sans contrainte.\n\n### Risque financier réduit :\n\nÉvitez les coûts initiaux élevés du CAPEX et préservez votre trésorerie.\n\n### Coûts prévisibles :\n\nPayez uniquement pour ce que vous utilisez avec des mensualités fixes.\n\n### Solutions modernes :\n\nAccédez aux dernières technologies sans investissement massif.\n\n### Sécurité garantie :\n\nBénéficiez de mises à jour régulières et d'une protection optimale.\n\n### Inclus dans le service IT OPEX\n\n#### Maintenance proactive :\n\nSurveillance continue et interventions préventives\n\n#### Support 24/7 :\n\nAssistance technique rapide et efficace\n\n#### Équipements modernes :\n\nMatériel professionnel de haute qualité\n\nUn service complet sans coûts initiaux lourds.\n\n### Simulateur de coûts\n\nCalculez vos mensualités en fonction de votre investissement\n\nTypes de services\n\nIPTV & Chromecast\n\nWiFi Professionnel\n\nInfrastructure IT\n\nSécurité IT\n\nVidéosurveillance\n\nTéléphonie IP\n\nInfrastructure Réseau\n\nContrôle d'Accès\n\nDétection Incendie\n\nSolutions d'Impression\n\nServices Cloud\n\nGestion de Données\n\nMode de paiement\n\nOPEX (mensualités)CAPEX (achat direct)\n\nMontant de l'investissement (MAD)\n\nDurée (en mois)12 mois\n\nNombre de chambres5 chambres\n\n## Ils nous font confiance\n\nDes entreprises leaders font confiance à notre expertise\n\n![Fairmont logo](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/clients/client-0.301999951932334.png)\n\n![Savoy logo](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/clients/client-0.06379018263780556.png)\n\n![RITZ logo](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/clients/client-0.4194924906941775.png)\n\n![SAPST logo](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/clients/client-0.6764096541740838.jpg)\n\n![CRI logo](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/clients/client-0.8377029980400532.png)\n\n![FS logo](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/clients/client-0.08170837708921219.png)\n\n![Alithya logo](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/clients/client-0.8152301465803293.png)\n\n![Madef logo](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/clients/client-0.3121996557551985.png)\n\n![Es Saadi Palace logo](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/clients/client-0.6965539612703564.png)\n\n![Kenzy logo](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/clients/client-0.9566813625484096.png)\n\n![Marriott logo](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/clients/client-0.40428328753656007.png)\n\n![Radisson logo](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/clients/client-0.49214605598841743.png)\n\n## Nos Partenaires Technologiques\n\nCollaborant avec les leaders mondiaux de la technologie\n\n![Partner logo](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/logos/partner-0.9759736940735568.webp)\n\n![Partner logo](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/logos/partner-0.7107897117273274.png)\n\n![Partner logo](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/logos/partner-0.15978528516794488.png)\n\n![Partner logo](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/logos/partner-0.2520337679408584.png)\n\n![Partner logo](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/logos/partner-0.46661706530038427.png)\n\n![Partner logo](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/logos/partner-0.29914786371514657.png)\n\n![Partner logo](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/logos/partner-0.6190884303708406.png)\n\n![Partner logo](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/logos/partner-0.9814720770911209.png)\n\n![Partner logo](https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/logos/partner-0.5533218978379937.png)\n\n## Questions Fréquentes\n\nTrouvez rapidement des réponses à vos questions sur nos services\n\n### Quels types de solutions IT proposez-vous pour l'hôtellerie ?\n\n### Comment assurez-vous le support technique ?\n\n### Quelles sont vos certifications ?\n\n### Proposez-vous des solutions sur mesure ?\n\n### Quel est le délai moyen de mise en place d'une solution ?\n\n## Contactez-nous\n\nDiscutons de vos besoins en IT et trouvons ensemble la meilleure solution\n\nNom complet\n\nEntreprise\n\nEmail\n\nTéléphone\n\nMessage additionnel\n\nEnvoyer","size_bytes":9106},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { insertChatMessageSchema, insertAlertSchema, insertNetworkPerformanceSchema, loginSchema } from \"@shared/schema\";\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\"\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication endpoints\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByUsername(username);\n      if (!user || user.password !== password) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      // Create a simple JWT-like token (for demo purposes)\n      const token = `vigon_${user.id}_${Date.now()}`;\n      \n      res.json({\n        token,\n        user: {\n          id: user.id,\n          username: user.username,\n          role: user.role,\n          name: user.name,\n        },\n      });\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid request data\" });\n    }\n  });\n\n  app.post(\"/api/auth/verify\", async (req, res) => {\n    try {\n      const { token } = req.body;\n      \n      if (!token || !token.startsWith(\"vigon_\")) {\n        return res.status(401).json({ error: \"Invalid token\" });\n      }\n\n      // Extract user ID from token\n      const parts = token.split(\"_\");\n      if (parts.length !== 3) {\n        return res.status(401).json({ error: \"Invalid token format\" });\n      }\n\n      const userId = parts[1];\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(401).json({ error: \"User not found\" });\n      }\n\n      res.json({\n        user: {\n          id: user.id,\n          username: user.username,\n          role: user.role,\n          name: user.name,\n        },\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Token verification failed\" });\n    }\n  });\n\n  // Dashboard data endpoints\n  app.get(\"/api/dashboard/overview\", async (req, res) => {\n    try {\n      const [systemMetrics, latestNetwork, alerts, powerConsumption] = await Promise.all([\n        storage.getSystemMetrics(),\n        storage.getLatestNetworkPerformance(),\n        storage.getOpenAlerts(),\n        storage.getLatestPowerConsumption(),\n      ]);\n\n      const overview = {\n        systemMetrics,\n        networkPerformance: latestNetwork,\n        alertsCount: alerts.length,\n        powerConsumption,\n        lastUpdated: new Date(),\n      };\n\n      res.json(overview);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch dashboard overview\" });\n    }\n  });\n\n  app.get(\"/api/network/performance\", async (req, res) => {\n    try {\n      const hours = parseInt(req.query.hours as string) || 24;\n      const history = await storage.getNetworkPerformanceHistory(hours);\n      res.json(history);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch network performance data\" });\n    }\n  });\n\n  app.get(\"/api/alerts\", async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 10;\n      const alerts = await storage.getAlerts(limit);\n      res.json(alerts);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch alerts\" });\n    }\n  });\n\n  app.patch(\"/api/alerts/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const updatedAlert = await storage.updateAlert(id, updates);\n      \n      if (!updatedAlert) {\n        return res.status(404).json({ error: \"Alert not found\" });\n      }\n      \n      res.json(updatedAlert);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update alert\" });\n    }\n  });\n\n  app.get(\"/api/power/consumption\", async (req, res) => {\n    try {\n      const days = parseInt(req.query.days as string) || 7;\n      const history = await storage.getPowerConsumptionHistory(days);\n      res.json(history);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch power consumption data\" });\n    }\n  });\n\n  // AI Chatbot endpoint\n  app.post(\"/api/chat\", async (req, res) => {\n    try {\n      const validatedMessage = insertChatMessageSchema.parse(req.body);\n      const chatMessage = await storage.createChatMessage(validatedMessage);\n\n      // Process the message with OpenAI\n      const systemContext = `You are an AI assistant for Vigon Systems' Hotel IT Infrastructure Management Dashboard. \n      You help IT staff with system monitoring, troubleshooting, and optimization. \n      You have access to real-time data about IPTV systems, WiFi networks, security systems, and power consumption.\n      Provide clear, actionable responses for IT operations.`;\n\n      const completion = await openai.chat.completions.create({\n        model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n        messages: [\n          { role: \"system\", content: systemContext },\n          { role: \"user\", content: validatedMessage.message }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const response = JSON.parse(completion.choices[0].message.content || '{\"response\": \"I apologize, but I encountered an error processing your request.\"}');\n      \n      const updatedMessage = await storage.updateChatMessage(chatMessage.id, response.response);\n      res.json(updatedMessage);\n    } catch (error) {\n      console.error(\"Chat error:\", error);\n      res.status(500).json({ error: \"Failed to process chat message\" });\n    }\n  });\n\n  app.get(\"/api/chat/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const limit = parseInt(req.query.limit as string) || 50;\n      const messages = await storage.getChatMessages(userId, limit);\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch chat messages\" });\n    }\n  });\n\n  // Voice command processing endpoint\n  app.post(\"/api/voice/process\", async (req, res) => {\n    try {\n      const { transcript } = req.body;\n      \n      if (!transcript) {\n        return res.status(400).json({ error: \"No transcript provided\" });\n      }\n\n      // Process voice command with OpenAI to understand intent\n      const completion = await openai.chat.completions.create({\n        model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n        messages: [\n          {\n            role: \"system\",\n            content: `You are processing voice commands for a Hotel IT Infrastructure Dashboard. \n            Extract the intent and parameters from the user's voice command.\n            Return JSON with: {\"action\": \"show_wifi|show_iptv|show_alerts|show_power\", \"parameters\": {\"floor\": number, \"timeframe\": string, \"system\": string}}`\n          },\n          { role: \"user\", content: transcript }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const intent = JSON.parse(completion.choices[0].message.content || '{\"action\": \"unknown\"}');\n      res.json(intent);\n    } catch (error) {\n      console.error(\"Voice processing error:\", error);\n      res.status(500).json({ error: \"Failed to process voice command\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time updates\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  wss.on('connection', (ws: WebSocket) => {\n    console.log('Client connected to WebSocket');\n\n    // Send initial data\n    const sendUpdate = async () => {\n      try {\n        const [systemMetrics, latestNetwork, alerts, powerConsumption] = await Promise.all([\n          storage.getSystemMetrics(),\n          storage.getLatestNetworkPerformance(),\n          storage.getOpenAlerts(),\n          storage.getLatestPowerConsumption(),\n        ]);\n\n        const update = {\n          type: 'dashboard_update',\n          data: {\n            systemMetrics,\n            networkPerformance: latestNetwork,\n            alerts,\n            powerConsumption,\n            timestamp: new Date(),\n          }\n        };\n\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.send(JSON.stringify(update));\n        }\n      } catch (error) {\n        console.error('Error sending WebSocket update:', error);\n      }\n    };\n\n    // Send updates every 5 seconds\n    const interval = setInterval(sendUpdate, 5000);\n    sendUpdate(); // Send initial update\n\n    ws.on('close', () => {\n      clearInterval(interval);\n      console.log('Client disconnected from WebSocket');\n    });\n\n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n      clearInterval(interval);\n    });\n  });\n\n  // Simulate real-time data updates\n  setInterval(async () => {\n    try {\n      // Update network performance\n      const currentLoad = 70 + Math.random() * 15;\n      const throughput = 1.0 + Math.random() * 0.5;\n      const latency = 10 + Math.random() * 5;\n      const activeGuests = Math.floor(250 + Math.random() * 50);\n\n      await storage.createNetworkPerformance({\n        currentLoad,\n        throughput,\n        latency,\n        activeGuests,\n      });\n\n      // Occasionally create new alerts\n      if (Math.random() < 0.1) { // 10% chance every 30 seconds\n        const alertTypes = [\n          { systemType: \"wifi\", systemName: \"WiFi - Floor \" + Math.ceil(Math.random() * 5), alertType: \"performance\", severity: \"warning\", message: \"High latency detected\" },\n          { systemType: \"iptv\", systemName: \"IPTV - Channel \" + Math.ceil(Math.random() * 10), alertType: \"quality\", severity: \"info\", message: \"Stream quality fluctuation\" },\n          { systemType: \"security\", systemName: \"Security - Camera \" + Math.ceil(Math.random() * 20), alertType: \"connectivity\", severity: \"critical\", message: \"Connection timeout\" },\n        ];\n        \n        const randomAlert = alertTypes[Math.floor(Math.random() * alertTypes.length)];\n        await storage.createAlert({\n          ...randomAlert,\n          status: \"open\",\n        });\n      }\n    } catch (error) {\n      console.error('Error updating real-time data:', error);\n    }\n  }, 30000); // Update every 30 seconds\n\n  return httpServer;\n}\n","size_bytes":10472},"server/storage.ts":{"content":"import { type User, type InsertUser, type SystemMetrics, type InsertSystemMetrics, type NetworkPerformance, type InsertNetworkPerformance, type Alert, type InsertAlert, type PowerConsumption, type InsertPowerConsumption, type ChatMessage, type InsertChatMessage } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // System Metrics\n  getSystemMetrics(): Promise<SystemMetrics[]>;\n  createSystemMetrics(metrics: InsertSystemMetrics): Promise<SystemMetrics>;\n  updateSystemMetrics(id: string, metrics: Partial<SystemMetrics>): Promise<SystemMetrics | undefined>;\n\n  // Network Performance\n  getLatestNetworkPerformance(): Promise<NetworkPerformance | undefined>;\n  getNetworkPerformanceHistory(hours?: number): Promise<NetworkPerformance[]>;\n  createNetworkPerformance(performance: InsertNetworkPerformance): Promise<NetworkPerformance>;\n\n  // Alerts\n  getAlerts(limit?: number): Promise<Alert[]>;\n  getOpenAlerts(): Promise<Alert[]>;\n  createAlert(alert: InsertAlert): Promise<Alert>;\n  updateAlert(id: string, alert: Partial<Alert>): Promise<Alert | undefined>;\n\n  // Power Consumption\n  getLatestPowerConsumption(): Promise<PowerConsumption | undefined>;\n  getPowerConsumptionHistory(days?: number): Promise<PowerConsumption[]>;\n  createPowerConsumption(consumption: InsertPowerConsumption): Promise<PowerConsumption>;\n\n  // Chat Messages\n  getChatMessages(userId: string, limit?: number): Promise<ChatMessage[]>;\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  updateChatMessage(id: string, response: string): Promise<ChatMessage | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private systemMetrics: Map<string, SystemMetrics>;\n  private networkPerformance: NetworkPerformance[];\n  private alerts: Map<string, Alert>;\n  private powerConsumption: PowerConsumption[];\n  private chatMessages: Map<string, ChatMessage>;\n\n  constructor() {\n    this.users = new Map();\n    this.systemMetrics = new Map();\n    this.networkPerformance = [];\n    this.alerts = new Map();\n    this.powerConsumption = [];\n    this.chatMessages = new Map();\n    this.initializeData();\n  }\n\n  private initializeData() {\n    // Initialize demo users\n    const adminUser: User = {\n      id: randomUUID(),\n      username: \"admin\",\n      password: \"1234\",\n      role: \"IT\",\n      name: \"IT Administrator\"\n    };\n    \n    const managerUser: User = {\n      id: randomUUID(),\n      username: \"manager\", \n      password: \"abcd\",\n      role: \"Manager\",\n      name: \"Hotel Manager\"\n    };\n    \n    this.users.set(adminUser.id, adminUser);\n    this.users.set(managerUser.id, managerUser);\n\n    // Initialize system metrics\n    const systems = [\n      { systemType: \"server\", systemName: \"Main Server\", uptime: 99.9, status: \"healthy\" },\n      { systemType: \"server\", systemName: \"Database\", uptime: 99.8, status: \"healthy\" },\n      { systemType: \"wifi\", systemName: \"Guest WiFi\", uptime: 97.5, status: \"warning\" },\n      { systemType: \"security\", systemName: \"Security System\", uptime: 100, status: \"healthy\" },\n      { systemType: \"iptv\", systemName: \"IPTV System\", uptime: 98.7, status: \"healthy\" },\n    ];\n\n    systems.forEach(system => {\n      const metrics: SystemMetrics = {\n        id: randomUUID(),\n        systemType: system.systemType,\n        systemName: system.systemName,\n        uptime: system.uptime,\n        status: system.status,\n        lastUpdated: new Date(),\n        metadata: null,\n      };\n      this.systemMetrics.set(metrics.id, metrics);\n    });\n\n    // Initialize network performance data\n    const now = new Date();\n    for (let i = 0; i < 24; i++) {\n      const timestamp = new Date(now.getTime() - (i * 60 * 60 * 1000));\n      this.networkPerformance.push({\n        id: randomUUID(),\n        timestamp,\n        currentLoad: 70 + Math.random() * 15,\n        throughput: 1.0 + Math.random() * 0.5,\n        latency: 10 + Math.random() * 5,\n        activeGuests: 250 + Math.random() * 50,\n      });\n    }\n\n    // Initialize alerts\n    const alertsData = [\n      {\n        systemType: \"wifi\",\n        systemName: \"WiFi - Floor 3\",\n        alertType: \"performance\",\n        severity: \"warning\",\n        message: \"High latency detected\",\n        status: \"investigating\",\n      },\n      {\n        systemType: \"iptv\",\n        systemName: \"IPTV - Channel 5\",\n        alertType: \"quality\",\n        severity: \"info\",\n        message: \"Stream quality restored\",\n        status: \"resolved\",\n      },\n      {\n        systemType: \"security\",\n        systemName: \"Security - Camera 12\",\n        alertType: \"connectivity\",\n        severity: \"critical\",\n        message: \"Connection timeout\",\n        status: \"open\",\n      },\n    ];\n\n    alertsData.forEach(alertData => {\n      const alert: Alert = {\n        id: randomUUID(),\n        ...alertData,\n        createdAt: new Date(Date.now() - Math.random() * 60 * 60 * 1000),\n        resolvedAt: alertData.status === \"resolved\" ? new Date() : null,\n      };\n      this.alerts.set(alert.id, alert);\n    });\n\n    // Initialize power consumption\n    this.powerConsumption.push({\n      id: randomUUID(),\n      timestamp: new Date(),\n      totalUsage: 8.4,\n      systemBreakdown: {\n        iptv: 2.1,\n        wifi: 1.8,\n        security: 1.2,\n        servers: 2.8,\n        other: 0.5,\n      },\n      recommendations: [\n        \"Switch idle access points to low-power mode between 2AM-6AM to save 15% energy\",\n        \"Optimize IPTV server load balancing to reduce energy costs by 12%\",\n      ],\n      potentialSavings: 12,\n    });\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      role: insertUser.role || \"admin\"\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // System Metrics methods\n  async getSystemMetrics(): Promise<SystemMetrics[]> {\n    return Array.from(this.systemMetrics.values());\n  }\n\n  async createSystemMetrics(metrics: InsertSystemMetrics): Promise<SystemMetrics> {\n    const id = randomUUID();\n    const systemMetrics: SystemMetrics = {\n      ...metrics,\n      id,\n      lastUpdated: new Date(),\n      metadata: metrics.metadata || {}\n    };\n    this.systemMetrics.set(id, systemMetrics);\n    return systemMetrics;\n  }\n\n  async updateSystemMetrics(id: string, updates: Partial<SystemMetrics>): Promise<SystemMetrics | undefined> {\n    const existing = this.systemMetrics.get(id);\n    if (!existing) return undefined;\n    \n    const updated: SystemMetrics = {\n      ...existing,\n      ...updates,\n      lastUpdated: new Date(),\n    };\n    this.systemMetrics.set(id, updated);\n    return updated;\n  }\n\n  // Network Performance methods\n  async getLatestNetworkPerformance(): Promise<NetworkPerformance | undefined> {\n    return this.networkPerformance.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())[0];\n  }\n\n  async getNetworkPerformanceHistory(hours: number = 24): Promise<NetworkPerformance[]> {\n    const cutoff = new Date(Date.now() - (hours * 60 * 60 * 1000));\n    return this.networkPerformance\n      .filter(perf => perf.timestamp >= cutoff)\n      .sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n  }\n\n  async createNetworkPerformance(performance: InsertNetworkPerformance): Promise<NetworkPerformance> {\n    const networkPerf: NetworkPerformance = {\n      ...performance,\n      id: randomUUID(),\n      timestamp: new Date(),\n    };\n    this.networkPerformance.push(networkPerf);\n    return networkPerf;\n  }\n\n  // Alerts methods\n  async getAlerts(limit: number = 50): Promise<Alert[]> {\n    return Array.from(this.alerts.values())\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())\n      .slice(0, limit);\n  }\n\n  async getOpenAlerts(): Promise<Alert[]> {\n    return Array.from(this.alerts.values())\n      .filter(alert => alert.status !== \"resolved\")\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async createAlert(alert: InsertAlert): Promise<Alert> {\n    const id = randomUUID();\n    const newAlert: Alert = {\n      ...alert,\n      id,\n      status: alert.status || \"open\",\n      createdAt: new Date(),\n      resolvedAt: null,\n    };\n    this.alerts.set(id, newAlert);\n    return newAlert;\n  }\n\n  async updateAlert(id: string, updates: Partial<Alert>): Promise<Alert | undefined> {\n    const existing = this.alerts.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Alert = {\n      ...existing,\n      ...updates,\n    };\n    \n    if (updates.status === \"resolved\" && !existing.resolvedAt) {\n      updated.resolvedAt = new Date();\n    }\n    \n    this.alerts.set(id, updated);\n    return updated;\n  }\n\n  // Power Consumption methods\n  async getLatestPowerConsumption(): Promise<PowerConsumption | undefined> {\n    return this.powerConsumption.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())[0];\n  }\n\n  async getPowerConsumptionHistory(days: number = 7): Promise<PowerConsumption[]> {\n    const cutoff = new Date(Date.now() - (days * 24 * 60 * 60 * 1000));\n    return this.powerConsumption\n      .filter(consumption => consumption.timestamp >= cutoff)\n      .sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n  }\n\n  async createPowerConsumption(consumption: InsertPowerConsumption): Promise<PowerConsumption> {\n    const powerConsumption: PowerConsumption = {\n      ...consumption,\n      id: randomUUID(),\n      timestamp: new Date(),\n      recommendations: consumption.recommendations || null,\n      potentialSavings: consumption.potentialSavings || null,\n    };\n    this.powerConsumption.push(powerConsumption);\n    return powerConsumption;\n  }\n\n  // Chat Messages methods\n  async getChatMessages(userId: string, limit: number = 50): Promise<ChatMessage[]> {\n    return Array.from(this.chatMessages.values())\n      .filter(msg => msg.userId === userId)\n      .sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime())\n      .slice(-limit);\n  }\n\n  async createChatMessage(message: InsertChatMessage): Promise<ChatMessage> {\n    const id = randomUUID();\n    const chatMessage: ChatMessage = {\n      ...message,\n      id,\n      userId: message.userId || null,\n      timestamp: new Date(),\n      response: null,\n    };\n    this.chatMessages.set(id, chatMessage);\n    return chatMessage;\n  }\n\n  async updateChatMessage(id: string, response: string): Promise<ChatMessage | undefined> {\n    const existing = this.chatMessages.get(id);\n    if (!existing) return undefined;\n    \n    const updated: ChatMessage = {\n      ...existing,\n      response,\n    };\n    this.chatMessages.set(id, updated);\n    return updated;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":11111},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, real, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"admin\"),\n  name: text(\"name\").notNull(),\n});\n\nexport const systemMetrics = pgTable(\"system_metrics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  systemType: text(\"system_type\").notNull(), // 'server', 'network', 'iptv', 'wifi', 'security'\n  systemName: text(\"system_name\").notNull(),\n  uptime: real(\"uptime\").notNull(),\n  status: text(\"status\").notNull(), // 'healthy', 'warning', 'critical'\n  lastUpdated: timestamp(\"last_updated\").notNull().default(sql`now()`),\n  metadata: jsonb(\"metadata\"), // Additional system-specific data\n});\n\nexport const networkPerformance = pgTable(\"network_performance\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  timestamp: timestamp(\"timestamp\").notNull().default(sql`now()`),\n  currentLoad: real(\"current_load\").notNull(),\n  throughput: real(\"throughput\").notNull(), // GB/s\n  latency: integer(\"latency\").notNull(), // ms\n  activeGuests: integer(\"active_guests\").notNull(),\n});\n\nexport const alerts = pgTable(\"alerts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  systemType: text(\"system_type\").notNull(),\n  systemName: text(\"system_name\").notNull(),\n  alertType: text(\"alert_type\").notNull(),\n  severity: text(\"severity\").notNull(), // 'info', 'warning', 'critical'\n  message: text(\"message\").notNull(),\n  status: text(\"status\").notNull().default(\"open\"), // 'open', 'investigating', 'resolved'\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  resolvedAt: timestamp(\"resolved_at\"),\n});\n\nexport const powerConsumption = pgTable(\"power_consumption\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  timestamp: timestamp(\"timestamp\").notNull().default(sql`now()`),\n  totalUsage: real(\"total_usage\").notNull(), // kW\n  systemBreakdown: jsonb(\"system_breakdown\").notNull(), // Per-system usage\n  recommendations: text(\"recommendations\").array(),\n  potentialSavings: real(\"potential_savings\"), // percentage\n});\n\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  message: text(\"message\").notNull(),\n  response: text(\"response\"),\n  timestamp: timestamp(\"timestamp\").notNull().default(sql`now()`),\n});\n\n// Auth schemas\nexport const loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const authResponseSchema = z.object({\n  token: z.string(),\n  user: z.object({\n    id: z.string(),\n    username: z.string(),\n    role: z.string(),\n    name: z.string(),\n  }),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  role: true,\n  name: true,\n});\n\nexport const insertSystemMetricsSchema = createInsertSchema(systemMetrics).omit({\n  id: true,\n  lastUpdated: true,\n});\n\nexport const insertNetworkPerformanceSchema = createInsertSchema(networkPerformance).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertAlertSchema = createInsertSchema(alerts).omit({\n  id: true,\n  createdAt: true,\n  resolvedAt: true,\n});\n\nexport const insertPowerConsumptionSchema = createInsertSchema(powerConsumption).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  timestamp: true,\n  response: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type SystemMetrics = typeof systemMetrics.$inferSelect;\nexport type NetworkPerformance = typeof networkPerformance.$inferSelect;\nexport type Alert = typeof alerts.$inferSelect;\nexport type PowerConsumption = typeof powerConsumption.$inferSelect;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\n\nexport type InsertSystemMetrics = z.infer<typeof insertSystemMetricsSchema>;\nexport type InsertNetworkPerformance = z.infer<typeof insertNetworkPerformanceSchema>;\nexport type InsertAlert = z.infer<typeof insertAlertSchema>;\nexport type InsertPowerConsumption = z.infer<typeof insertPowerConsumptionSchema>;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\n","size_bytes":4673},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/components/auth/AuthProvider\";\nimport { ProtectedRoute } from \"@/components/auth/ProtectedRoute\";\nimport Dashboard from \"@/pages/dashboard\";\nimport LoginPage from \"@/pages/login\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={LoginPage} />\n      <Route path=\"/dashboard\">\n        <ProtectedRoute>\n          <Dashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/\">\n        <ProtectedRoute>\n          <Dashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1174},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222.2 84% 4.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222.2 84% 4.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222.2 84% 4.9%);\n  --primary: hsl(221.2 83.2% 53.3%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222.2 84% 4.9%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(222.2 84% 4.9%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(221.2 83.2% 53.3%);\n  --chart-1: hsl(12 76% 61%);\n  --chart-2: hsl(173 58% 39%);\n  --chart-3: hsl(197 37% 24%);\n  --chart-4: hsl(43 74% 66%);\n  --chart-5: hsl(27 87% 67%);\n  --radius: 0.75rem;\n  --vigon-blue: hsl(221.2 83.2% 53.3%);\n  --vigon-light: hsl(221.2 83.2% 63.3%);\n  --vigon-dark: hsl(221.2 83.2% 43.3%);\n}\n\n.dark {\n  --background: hsl(222.2 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222.2 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222.2 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(217.2 91.2% 59.8%);\n  --primary-foreground: hsl(222.2 84% 4.9%);\n  --secondary: hsl(217.2 32.6% 17.5%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217.2 32.6% 17.5%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(217.2 32.6% 17.5%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(217.2 32.6% 17.5%);\n  --input: hsl(217.2 32.6% 17.5%);\n  --ring: hsl(224.3 76.3% 94.1%);\n  --chart-1: hsl(220 70% 50%);\n  --chart-2: hsl(160 60% 45%);\n  --chart-3: hsl(30 80% 55%);\n  --chart-4: hsl(280 65% 60%);\n  --chart-5: hsl(340 75% 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n}\n\n@layer utilities {\n  .vigon-blue {\n    color: var(--vigon-blue);\n  }\n  .bg-vigon-blue {\n    background-color: var(--vigon-blue);\n  }\n  .text-vigon-blue {\n    color: var(--vigon-blue);\n  }\n  .text-vigon-light {\n    color: var(--vigon-light);\n  }\n  .text-vigon-dark {\n    color: var(--vigon-dark);\n  }\n  .border-vigon-blue {\n    border-color: var(--vigon-blue);\n  }\n  .hover\\:bg-vigon-dark:hover {\n    background-color: var(--vigon-dark);\n  }\n  .hover\\:text-vigon-blue:hover {\n    color: var(--vigon-blue);\n  }\n  .hover\\:text-vigon-dark:hover {\n    color: var(--vigon-dark);\n  }\n  .focus\\:ring-vigon-blue:focus {\n    --tw-ring-color: var(--vigon-blue);\n  }\n  .focus\\:border-vigon-blue:focus {\n    border-color: var(--vigon-blue);\n  }\n}\n","size_bytes":2827},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useVoiceCommand.ts":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function useVoiceCommand() {\n  const [isListening, setIsListening] = useState(false);\n  const [transcript, setTranscript] = useState(\"\");\n  const recognitionRef = useRef<any>(null);\n  const { toast } = useToast();\n\n  const processVoiceMutation = useMutation({\n    mutationFn: async (transcript: string) => {\n      return apiRequest(\"POST\", \"/api/voice/process\", { transcript });\n    },\n    onSuccess: (response) => {\n      const data = response.json();\n      toast({\n        title: \"Voice Command Processed\",\n        description: `Action: ${data.action}`,\n      });\n      // Here you would handle the intent and navigate/update UI accordingly\n    },\n    onError: () => {\n      toast({\n        title: \"Voice Command Error\",\n        description: \"Failed to process voice command\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (typeof window !== \"undefined\" && \"webkitSpeechRecognition\" in window) {\n      const SpeechRecognition = (window as any).webkitSpeechRecognition;\n      recognitionRef.current = new SpeechRecognition();\n      \n      recognitionRef.current.continuous = false;\n      recognitionRef.current.interimResults = true;\n      recognitionRef.current.lang = \"en-US\";\n\n      recognitionRef.current.onresult = (event: any) => {\n        const currentTranscript = Array.from(event.results)\n          .map((result: any) => result[0].transcript)\n          .join(\"\");\n        \n        setTranscript(currentTranscript);\n\n        // Process final result\n        if (event.results[event.results.length - 1].isFinal) {\n          processVoiceMutation.mutate(currentTranscript);\n          setIsListening(false);\n          setTranscript(\"\");\n        }\n      };\n\n      recognitionRef.current.onerror = (event: any) => {\n        console.error(\"Speech recognition error:\", event.error);\n        setIsListening(false);\n        setTranscript(\"\");\n        toast({\n          title: \"Voice Recognition Error\",\n          description: \"Please try again\",\n          variant: \"destructive\",\n        });\n      };\n\n      recognitionRef.current.onend = () => {\n        setIsListening(false);\n      };\n    }\n\n    return () => {\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n    };\n  }, [toast, processVoiceMutation]);\n\n  const startListening = () => {\n    if (recognitionRef.current && !isListening) {\n      setTranscript(\"\");\n      setIsListening(true);\n      recognitionRef.current.start();\n    }\n  };\n\n  const stopListening = () => {\n    if (recognitionRef.current && isListening) {\n      recognitionRef.current.stop();\n      setIsListening(false);\n      setTranscript(\"\");\n    }\n  };\n\n  return {\n    isListening,\n    transcript,\n    startListening,\n    stopListening,\n    isSupported: typeof window !== \"undefined\" && \"webkitSpeechRecognition\" in window,\n  };\n}\n","size_bytes":3031},"client/src/hooks/useWebSocket.ts":{"content":"import { useState, useEffect, useRef } from \"react\";\n\ninterface WebSocketMessage {\n  type: string;\n  data: any;\n}\n\nexport function useWebSocket() {\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n  const ws = useRef<WebSocket | null>(null);\n\n  useEffect(() => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    const connect = () => {\n      ws.current = new WebSocket(wsUrl);\n\n      ws.current.onopen = () => {\n        setIsConnected(true);\n        console.log(\"WebSocket connected\");\n      };\n\n      ws.current.onmessage = (event) => {\n        try {\n          const message = JSON.parse(event.data);\n          setLastMessage(message);\n        } catch (error) {\n          console.error(\"Error parsing WebSocket message:\", error);\n        }\n      };\n\n      ws.current.onclose = () => {\n        setIsConnected(false);\n        console.log(\"WebSocket disconnected\");\n        \n        // Attempt to reconnect after 3 seconds\n        setTimeout(connect, 3000);\n      };\n\n      ws.current.onerror = (error) => {\n        console.error(\"WebSocket error:\", error);\n        setIsConnected(false);\n      };\n    };\n\n    connect();\n\n    return () => {\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, []);\n\n  return { isConnected, lastMessage };\n}\n","size_bytes":1445},"client/src/lib/openai.ts":{"content":"// This file contains client-side utilities for OpenAI integration\n// The actual OpenAI calls are made server-side for security\n\nexport interface ChatMessage {\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp?: Date;\n}\n\nexport interface SystemStatus {\n  name: string;\n  status: 'healthy' | 'warning' | 'critical';\n  uptime: number;\n  type: string;\n}\n\nexport function generateSystemPrompt(systems: SystemStatus[], alerts: any[], networkMetrics: any) {\n  return `You are an AI assistant for Vigon Systems Hotel IT Infrastructure Management. \nYou help IT staff with system monitoring, troubleshooting, and maintenance.\n\nCurrent System Status:\n${systems.map(s => `- ${s.name}: ${s.status} (${s.uptime}% uptime)`).join('\\n')}\n\nRecent Alerts:\n${alerts.map(a => `- ${a.message} (${a.severity})`).join('\\n')}\n\nNetwork Performance:\n- Load: ${networkMetrics?.load}%\n- Latency: ${networkMetrics?.latency}ms\n- Active Connections: ${networkMetrics?.activeConnections}\n\nProvide helpful, technical responses for IT operations. Keep responses concise and actionable.`;\n}\n\nexport function formatChatHistory(messages: any[]): ChatMessage[] {\n  const formatted: ChatMessage[] = [];\n  \n  messages.forEach(msg => {\n    formatted.push({\n      role: 'user',\n      content: msg.message,\n      timestamp: new Date(msg.createdAt)\n    });\n    \n    if (msg.response) {\n      formatted.push({\n        role: 'assistant', \n        content: msg.response,\n        timestamp: new Date(msg.createdAt)\n      });\n    }\n  });\n  \n  return formatted;\n}\n","size_bytes":1525},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport Header from \"@/components/dashboard/Header\";\nimport Sidebar from \"@/components/dashboard/Sidebar\";\nimport KPICards from \"@/components/dashboard/KPICards\";\nimport SystemStatus from \"@/components/dashboard/SystemStatus\";\nimport NetworkPerformance from \"@/components/dashboard/NetworkPerformance\";\nimport IPTVPerformance from \"@/components/dashboard/IPTVPerformance\";\nimport SustainabilityMetrics from \"@/components/dashboard/SustainabilityMetrics\";\nimport AlertsTable from \"@/components/dashboard/AlertsTable\";\nimport AIChatbot from \"@/components/dashboard/AIChatbot\";\nimport VoiceCommandModal from \"@/components/dashboard/VoiceCommandModal\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\n\nexport default function Dashboard() {\n  const { isConnected, lastMessage } = useWebSocket();\n\n  useEffect(() => {\n    document.title = \"Vigon Systems - Hotel IT Infrastructure Management\";\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Header />\n      \n      <div className=\"flex\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"p-6\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-slate-900\">Infrastructure Dashboard</h2>\n              <div className=\"flex items-center space-x-2 mt-1\">\n                <p className=\"text-slate-600\">Real-time monitoring and management of hotel IT systems</p>\n                <div className={`flex items-center space-x-1 text-sm ${isConnected ? 'text-green-600' : 'text-red-600'}`}>\n                  <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'}`} />\n                  <span>{isConnected ? 'Connected' : 'Disconnected'}</span>\n                </div>\n              </div>\n            </div>\n\n            <KPICards />\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6\">\n              <div className=\"lg:col-span-2\">\n                <SystemStatus />\n              </div>\n              <NetworkPerformance />\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n              <IPTVPerformance />\n              <SustainabilityMetrics />\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <div className=\"lg:col-span-2\">\n                <AlertsTable />\n              </div>\n              <AIChatbot />\n            </div>\n          </div>\n        </main>\n      </div>\n\n      <VoiceCommandModal />\n    </div>\n  );\n}\n","size_bytes":2558},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Shield, Loader2 } from \"lucide-react\";\nimport { loginSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ntype LoginFormData = {\n  username: string;\n  password: string;\n};\n\nexport default function LoginPage() {\n  const [error, setError] = useState<string | null>(null);\n  const [, setLocation] = useLocation();\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      // Store authentication data\n      localStorage.setItem(\"vigon_token\", data.token);\n      localStorage.setItem(\"vigon_user\", JSON.stringify(data.user));\n      \n      // Redirect to dashboard\n      setLocation(\"/dashboard\");\n    },\n    onError: (error: any) => {\n      setError(error.message || \"Login failed. Please try again.\");\n    },\n  });\n\n  const onSubmit = (data: LoginFormData) => {\n    setError(null);\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-900 via-blue-800 to-indigo-900 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-8\">\n        {/* Logo and Header */}\n        <div className=\"text-center space-y-4\">\n          <div className=\"mx-auto w-24 h-24 bg-white rounded-full flex items-center justify-center shadow-lg\">\n            <img \n              src=\"https://dqcgwmxrlprmqeijjsme.supabase.co/storage/v1/object/public/logos/color-1736899024753-0.5219336404716874.png\"\n              alt=\"Vigon Systems\"\n              className=\"w-20 h-auto\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <h1 className=\"text-3xl font-bold text-white\">\n              VIGON SYSTEMS\n            </h1>\n            <p className=\"text-blue-200\">\n              Hotel IT Infrastructure Management\n            </p>\n          </div>\n        </div>\n\n        {/* Login Card */}\n        <Card className=\"border-0 shadow-2xl bg-white/95 backdrop-blur-sm\">\n          <CardHeader className=\"space-y-2 text-center\">\n            <div className=\"mx-auto w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n              <Shield className=\"w-6 h-6 text-blue-600\" />\n            </div>\n            <CardTitle className=\"text-2xl font-semibold text-gray-900\">\n              Staff Login\n            </CardTitle>\n            <CardDescription className=\"text-gray-600\">\n              Access your IT management dashboard\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-6\">\n            {error && (\n              <Alert className=\"border-red-200 bg-red-50\">\n                <AlertDescription className=\"text-red-700\">\n                  {error}\n                </AlertDescription>\n              </Alert>\n            )}\n\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-700\">Username</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"Enter your username\"\n                          className=\"h-11\"\n                          disabled={loginMutation.isPending}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-700\">Password</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"password\"\n                          placeholder=\"Enter your password\"\n                          className=\"h-11\"\n                          disabled={loginMutation.isPending}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full h-11 bg-blue-600 hover:bg-blue-700 text-white font-medium\"\n                  disabled={loginMutation.isPending}\n                >\n                  {loginMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Signing in...\n                    </>\n                  ) : (\n                    \"Sign In\"\n                  )}\n                </Button>\n              </form>\n            </Form>\n\n            {/* Demo Credentials */}\n            <div className=\"p-4 bg-gray-50 rounded-lg space-y-3\">\n              <h4 className=\"text-sm font-medium text-gray-700\">Demo Accounts:</h4>\n              <div className=\"text-xs text-gray-600 space-y-1\">\n                <div className=\"flex justify-between\">\n                  <span className=\"font-medium\">IT Staff:</span>\n                  <span>admin / 1234</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"font-medium\">Manager:</span>\n                  <span>manager / abcd</span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Footer */}\n        <div className=\"text-center text-blue-200 text-sm\">\n          <p>© 2024 Vigon Systems. All rights reserved.</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6644},"client/src/pages/manager-dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TrendingUp, TrendingDown, Zap, DollarSign, Shield, Wifi } from \"lucide-react\";\nimport DashboardHeader from \"@/components/dashboard/DashboardHeader\";\n\nexport default function ManagerDashboard() {\n  const { data: overview, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard/overview\"],\n    refetchInterval: 5000,\n  });\n\n  const { data: powerData } = useQuery({\n    queryKey: [\"/api/power/consumption\"],\n    refetchInterval: 10000,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <DashboardHeader />\n        <main className=\"container mx-auto px-6 py-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {[...Array(4)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardHeader className=\"space-y-2\">\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                  <div className=\"h-8 bg-gray-200 rounded w-1/2\"></div>\n                </CardHeader>\n              </Card>\n            ))}\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  const systemMetrics = overview?.systemMetrics || [];\n  const uptimePercentage = systemMetrics.length > 0 \n    ? (systemMetrics.reduce((acc: number, system: any) => acc + system.uptime, 0) / systemMetrics.length).toFixed(1)\n    : '0.0';\n\n  const healthySystemsCount = systemMetrics.filter((system: any) => system.status === 'healthy').length;\n  const totalSystemsCount = systemMetrics.length;\n\n  const latestPowerConsumption = powerData?.[0] || null;\n  const potentialSavings = latestPowerConsumption?.potentialSavings || 0;\n\n  // Calculate estimated monthly costs (assuming 8.4 kW average)\n  const monthlyKwh = (latestPowerConsumption?.totalUsage || 8.4) * 24 * 30;\n  const estimatedMonthlyCost = monthlyKwh * 0.12; // $0.12 per kWh estimate\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <DashboardHeader />\n      \n      <main className=\"container mx-auto px-6 py-8\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n            Executive Dashboard\n          </h2>\n          <p className=\"text-gray-600\">\n            Key performance indicators and operational overview\n          </p>\n        </div>\n\n        {/* KPI Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {/* System Uptime */}\n          <Card className=\"border-l-4 border-l-green-500\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">\n                Overall Uptime\n              </CardTitle>\n              <Shield className=\"h-4 w-4 text-green-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">\n                {uptimePercentage}%\n              </div>\n              <p className=\"text-xs text-gray-500 mt-1\">\n                {healthySystemsCount}/{totalSystemsCount} systems healthy\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* Monthly IT Costs */}\n          <Card className=\"border-l-4 border-l-blue-500\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">\n                Est. Monthly IT Costs\n              </CardTitle>\n              <DollarSign className=\"h-4 w-4 text-blue-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600\">\n                ${estimatedMonthlyCost.toFixed(0)}\n              </div>\n              <p className=\"text-xs text-gray-500 mt-1\">\n                Power & infrastructure\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* Energy Savings */}\n          <Card className=\"border-l-4 border-l-amber-500\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">\n                Potential Savings\n              </CardTitle>\n              <Zap className=\"h-4 w-4 text-amber-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-amber-600\">\n                {potentialSavings}%\n              </div>\n              <div className=\"flex items-center mt-1\">\n                <TrendingDown className=\"h-3 w-3 text-green-600 mr-1\" />\n                <p className=\"text-xs text-green-600\">\n                  ${(estimatedMonthlyCost * (potentialSavings / 100)).toFixed(0)}/month\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Guest Connectivity */}\n          <Card className=\"border-l-4 border-l-purple-500\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">\n                Guest Connectivity\n              </CardTitle>\n              <Wifi className=\"h-4 w-4 text-purple-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {overview?.networkPerformance?.activeGuests || 0}\n              </div>\n              <div className=\"flex items-center mt-1\">\n                <TrendingUp className=\"h-3 w-3 text-green-600 mr-1\" />\n                <p className=\"text-xs text-green-600\">\n                  Active connections\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* System Status Overview */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Systems Health */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Systems Health Overview</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {systemMetrics.map((system: any) => (\n                  <div key={system.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium text-gray-900\">{system.systemName}</h4>\n                      <p className=\"text-sm text-gray-600 capitalize\">{system.systemType}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge \n                        variant={system.status === 'healthy' ? 'default' : \n                                system.status === 'warning' ? 'secondary' : 'destructive'}\n                        className={system.status === 'healthy' ? 'bg-green-100 text-green-800' :\n                                  system.status === 'warning' ? 'bg-yellow-100 text-yellow-800' :\n                                  'bg-red-100 text-red-800'}\n                      >\n                        {system.status}\n                      </Badge>\n                      <p className=\"text-sm text-gray-500 mt-1\">{system.uptime}% uptime</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Energy Efficiency */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Energy Efficiency Recommendations</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {latestPowerConsumption?.recommendations?.map((recommendation: string, index: number) => (\n                  <div key={index} className=\"flex items-start space-x-3 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                    <Zap className=\"h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0\" />\n                    <p className=\"text-sm text-gray-800\">{recommendation}</p>\n                  </div>\n                )) || (\n                  <p className=\"text-gray-500 text-sm\">No energy recommendations available at this time.</p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":8363},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/services/openai.ts":{"content":"// This file contains client-side helpers for OpenAI integration\n// The actual OpenAI calls are made on the server for security\n\nexport interface ChatMessage {\n  role: \"user\" | \"assistant\" | \"system\";\n  content: string;\n}\n\nexport interface VoiceCommandIntent {\n  action: string;\n  parameters: {\n    floor?: number;\n    timeframe?: string;\n    system?: string;\n  };\n}\n\nexport const VOICE_COMMAND_EXAMPLES = [\n  \"Show WiFi performance for floor 2\",\n  \"What was IPTV uptime last week?\",\n  \"Display security camera status\",\n  \"Show power consumption trends\",\n  \"List all critical alerts\",\n  \"Check network performance\",\n];\n\nexport const CHAT_SUGGESTIONS = [\n  \"Why is IPTV down?\",\n  \"Show me the last 10 alerts from the CCTV system\",\n  \"How can I optimize power consumption?\",\n  \"What's causing the WiFi issues on floor 3?\",\n  \"Generate a system health report\",\n];\n","size_bytes":861},"client/src/components/auth/AuthProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface User {\n  id: string;\n  username: string;\n  role: string;\n  name: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const { data: verifyData, isLoading: isVerifying } = useQuery({\n    queryKey: [\"/api/auth/verify\"],\n    queryFn: async () => {\n      const token = localStorage.getItem(\"vigon_token\");\n      if (!token) {\n        throw new Error(\"No token found\");\n      }\n\n      const response = await apiRequest(\"POST\", \"/api/auth/verify\", { token });\n      return await response.json();\n    },\n    retry: false,\n    enabled: !!localStorage.getItem(\"vigon_token\"),\n  });\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"vigon_token\");\n    \n    if (!token) {\n      setIsLoading(false);\n      return;\n    }\n\n    if (verifyData?.user) {\n      setUser(verifyData.user);\n    }\n    \n    setIsLoading(isVerifying);\n  }, [verifyData, isVerifying]);\n\n  const logout = () => {\n    localStorage.removeItem(\"vigon_token\");\n    localStorage.removeItem(\"vigon_user\");\n    setUser(null);\n    window.location.href = \"/login\";\n  };\n\n  const value: AuthContextType = {\n    user,\n    isAuthenticated: !!user,\n    isLoading,\n    logout,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}","size_bytes":1992},"client/src/components/auth/ProtectedRoute.tsx":{"content":"import { ReactNode } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"./AuthProvider\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface ProtectedRouteProps {\n  children: ReactNode;\n  allowedRoles?: string[];\n}\n\nexport function ProtectedRoute({ children, allowedRoles }: ProtectedRouteProps) {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center space-y-4\">\n          <Loader2 className=\"w-8 h-8 animate-spin mx-auto text-blue-600\" />\n          <p className=\"text-gray-600\">Checking authentication...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    // Use setTimeout to avoid setState during render\n    setTimeout(() => setLocation(\"/login\"), 0);\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center space-y-4\">\n          <Loader2 className=\"w-8 h-8 animate-spin mx-auto text-blue-600\" />\n          <p className=\"text-gray-600\">Redirecting to login...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (allowedRoles && user && !allowedRoles.includes(user.role)) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center space-y-4\">\n          <h1 className=\"text-2xl font-semibold text-gray-900\">Access Denied</h1>\n          <p className=\"text-gray-600\">You don't have permission to access this page.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n}","size_bytes":1673},"client/src/components/dashboard/AIChatbot.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Bot, User, Send, Loader2 } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/components/auth/AuthProvider\";\n\nexport default function AIChatbot() {\n  const [message, setMessage] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n  const userId = user?.id || \"admin\";\n\n  const { data: messages = [], isLoading } = useQuery({\n    queryKey: [\"/api/chat\", userId],\n    refetchInterval: 2000,\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (message: string) => {\n      setIsTyping(true);\n      const response = await apiRequest(\"POST\", \"/api/chat\", { userId, message });\n      return await response.json();\n    },\n    onSuccess: () => {\n      setIsTyping(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/chat\", userId] });\n      setMessage(\"\");\n    },\n    onError: () => {\n      setIsTyping(false);\n    },\n  });\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSend = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (message.trim() && !sendMessageMutation.isPending) {\n      sendMessageMutation.mutate(message.trim());\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSend(e);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"relative\">\n              <Bot className=\"w-6 h-6 text-blue-600\" />\n              <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full animate-pulse border-2 border-white\" />\n            </div>\n            <CardTitle className=\"text-lg\">Vigon AI Assistant</CardTitle>\n          </div>\n          <div className=\"flex items-center space-x-2 text-green-600\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n            <span className=\"text-sm font-medium\">Online</span>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4 mb-4 h-64 overflow-y-auto\">\n          {isLoading ? (\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-slate-200 rounded-full animate-pulse\" />\n              <div className=\"flex-1 h-4 bg-slate-200 rounded animate-pulse\" />\n            </div>\n          ) : (\n            <>\n              {!messages.length && (\n                <div className=\"flex space-x-3 animate-fade-in\">\n                  <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center shadow-lg\">\n                    <Bot className=\"h-4 w-4 text-white\" />\n                  </div>\n                  <div className=\"flex-1 bg-slate-100 rounded-lg p-3\">\n                    <p className=\"text-sm text-slate-900\">\n                      Hello! I'm your IT assistant. How can I help you today?\n                    </p>\n                    <p className=\"text-xs text-slate-500 mt-1\">Just now</p>\n                  </div>\n                </div>\n              )}\n              \n              {messages.map((msg: any) => (\n                <div key={msg.id}>\n                  <div className=\"flex space-x-2 justify-end mb-2\">\n                    <div className=\"flex-1 bg-vigon-blue rounded-lg p-3 text-right max-w-xs ml-auto\">\n                      <p className=\"text-sm text-white\">{msg.message}</p>\n                      <p className=\"text-xs text-blue-200 mt-1\">\n                        {formatDistanceToNow(new Date(msg.timestamp), { addSuffix: true })}\n                      </p>\n                    </div>\n                    <div className=\"w-8 h-8 bg-slate-300 rounded-full flex items-center justify-center\">\n                      <User className=\"h-4 w-4 text-slate-600\" />\n                    </div>\n                  </div>\n                  \n                  {msg.response && (\n                    <div className=\"flex space-x-2\">\n                      <div className=\"w-8 h-8 bg-vigon-blue rounded-full flex items-center justify-center\">\n                        <Bot className=\"h-4 w-4 text-white\" />\n                      </div>\n                      <div className=\"flex-1 bg-slate-100 rounded-lg p-3\">\n                        <p className=\"text-sm text-slate-900\">{msg.response}</p>\n                        <p className=\"text-xs text-slate-500 mt-1\">\n                          {formatDistanceToNow(new Date(msg.timestamp), { addSuffix: true })}\n                        </p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ))}\n              \n              {sendMessageMutation.isPending && (\n                <div className=\"flex space-x-2\">\n                  <div className=\"w-8 h-8 bg-vigon-blue rounded-full flex items-center justify-center\">\n                    <Bot className=\"h-4 w-4 text-white\" />\n                  </div>\n                  <div className=\"flex-1 bg-slate-100 rounded-lg p-3\">\n                    <div className=\"flex space-x-1\">\n                      <div className=\"w-2 h-2 bg-slate-400 rounded-full animate-bounce\" />\n                      <div className=\"w-2 h-2 bg-slate-400 rounded-full animate-bounce\" style={{ animationDelay: \"0.1s\" }} />\n                      <div className=\"w-2 h-2 bg-slate-400 rounded-full animate-bounce\" style={{ animationDelay: \"0.2s\" }} />\n                    </div>\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n        \n        <form onSubmit={handleSend} className=\"flex space-x-2\">\n          <Input\n            type=\"text\"\n            placeholder=\"Ask me anything about the systems...\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            onKeyPress={handleKeyPress}\n            disabled={sendMessageMutation.isPending}\n            className=\"flex-1 focus:ring-vigon-blue focus:border-vigon-blue\"\n          />\n          <Button\n            type=\"submit\"\n            disabled={!message.trim() || sendMessageMutation.isPending}\n            className=\"bg-vigon-blue hover:bg-vigon-dark\"\n          >\n            <Send className=\"h-4 w-4\" />\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6964},"client/src/components/dashboard/AlertsTable.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Wifi, Tv, Shield, CheckCircle, AlertTriangle } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst systemIcons = {\n  wifi: Wifi,\n  iptv: Tv,\n  security: Shield,\n};\n\nconst severityColors = {\n  info: \"bg-blue-100 text-blue-700\",\n  warning: \"bg-yellow-100 text-yellow-700\",\n  critical: \"bg-red-100 text-red-700\",\n};\n\nconst statusColors = {\n  open: \"bg-gray-100 text-gray-700\",\n  investigating: \"bg-blue-100 text-blue-700\",\n  resolved: \"bg-green-100 text-green-700\",\n};\n\nexport default function AlertsTable() {\n  const queryClient = useQueryClient();\n  \n  const { data: alerts, isLoading } = useQuery({\n    queryKey: [\"/api/alerts\"],\n    refetchInterval: 5000,\n  });\n\n  const updateAlertMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      return apiRequest(\"PATCH\", `/api/alerts/${id}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/alerts\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/overview\"] });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Alerts</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-16 bg-slate-100 rounded animate-pulse\" />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const handleStatusUpdate = (id: string, status: string) => {\n    updateAlertMutation.mutate({ id, status });\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Recent Alerts</CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-vigon-blue hover:text-vigon-dark\">\n            View All\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow className=\"border-slate-200\">\n                <TableHead className=\"text-slate-600\">System</TableHead>\n                <TableHead className=\"text-slate-600\">Alert</TableHead>\n                <TableHead className=\"text-slate-600\">Severity</TableHead>\n                <TableHead className=\"text-slate-600\">Time</TableHead>\n                <TableHead className=\"text-slate-600\">Status</TableHead>\n                <TableHead className=\"text-slate-600\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {alerts?.map((alert: any) => {\n                const IconComponent = systemIcons[alert.systemType as keyof typeof systemIcons] || AlertTriangle;\n                return (\n                  <TableRow key={alert.id} className=\"border-slate-100\">\n                    <TableCell>\n                      <div className=\"flex items-center space-x-2\">\n                        <IconComponent className={`h-4 w-4 ${\n                          alert.severity === \"critical\" ? \"text-red-500\" :\n                          alert.severity === \"warning\" ? \"text-yellow-500\" : \"text-blue-500\"\n                        }`} />\n                        <span className=\"text-sm font-medium text-slate-900\">{alert.systemName}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"text-sm text-slate-600\">{alert.message}</TableCell>\n                    <TableCell>\n                      <Badge className={severityColors[alert.severity as keyof typeof severityColors]}>\n                        {alert.severity}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-sm text-slate-500\">\n                      {formatDistanceToNow(new Date(alert.createdAt), { addSuffix: true })}\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={statusColors[alert.status as keyof typeof statusColors]}>\n                        {alert.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {alert.status !== \"resolved\" && (\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => handleStatusUpdate(alert.id, \"resolved\")}\n                          disabled={updateAlertMutation.isPending}\n                          className=\"text-green-600 hover:text-green-700\"\n                        >\n                          <CheckCircle className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5300},"client/src/components/dashboard/Header.tsx":{"content":"import { useState } from \"react\";\nimport { Search, Bell, Mic, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useVoiceCommand } from \"@/hooks/useVoiceCommand\";\n\nexport default function Header() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { isListening, startListening, stopListening } = useVoiceCommand();\n\n  const handleVoiceToggle = () => {\n    if (isListening) {\n      stopListening();\n    } else {\n      startListening();\n    }\n  };\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-slate-200\">\n      <div className=\"px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-vigon-blue rounded-lg flex items-center justify-center\">\n                <div className=\"w-4 h-4 border-2 border-white rounded-sm\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-semibold text-slate-900\">Vigon Systems</h1>\n                <p className=\"text-sm text-slate-500\">Hotel IT Infrastructure Management</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleVoiceToggle}\n              className={`p-2 transition-colors duration-200 ${\n                isListening \n                  ? 'text-vigon-blue bg-vigon-blue/10' \n                  : 'text-slate-400 hover:text-vigon-blue'\n              }`}\n            >\n              <Mic className={`h-5 w-5 ${isListening ? 'animate-pulse' : ''}`} />\n            </Button>\n            \n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-slate-400\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search systems...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 w-64 focus:ring-vigon-blue focus:border-vigon-blue\"\n              />\n            </div>\n            \n            <div className=\"relative\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"p-2 text-slate-400 hover:text-vigon-blue\">\n                <Bell className=\"h-5 w-5\" />\n                <span className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center\">\n                  3\n                </span>\n              </Button>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <div className=\"text-right\">\n                <p className=\"text-sm font-medium text-slate-900\">System Admin</p>\n                <p className=\"text-xs text-slate-500\">IT Manager</p>\n              </div>\n              <div className=\"w-8 h-8 bg-vigon-blue rounded-full flex items-center justify-center\">\n                <User className=\"h-4 w-4 text-white\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3245},"client/src/components/dashboard/IPTVPerformance.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tv, Signal, AlertCircle } from \"lucide-react\";\n\nexport default function IPTVPerformance() {\n  // Mock IPTV data - in production this would come from the API\n  const iptvData = {\n    activeStreams: 187,\n    signalQuality: \"Excellent\",\n    issues: 2,\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>IPTV Performance</CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-vigon-blue hover:text-vigon-dark\">\n            View Details\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between p-3 bg-slate-50 rounded-lg\">\n            <div className=\"flex items-center space-x-3\">\n              <Tv className=\"h-5 w-5 text-slate-600\" />\n              <span className=\"text-sm font-medium text-slate-900\">Active Streams</span>\n            </div>\n            <span className=\"font-semibold text-slate-900\">{iptvData.activeStreams}</span>\n          </div>\n          \n          <div className=\"flex items-center justify-between p-3 bg-slate-50 rounded-lg\">\n            <div className=\"flex items-center space-x-3\">\n              <Signal className=\"h-5 w-5 text-slate-600\" />\n              <span className=\"text-sm font-medium text-slate-900\">Signal Quality</span>\n            </div>\n            <span className=\"font-semibold text-green-600\">{iptvData.signalQuality}</span>\n          </div>\n          \n          <div className=\"flex items-center justify-between p-3 bg-slate-50 rounded-lg\">\n            <div className=\"flex items-center space-x-3\">\n              <AlertCircle className=\"h-5 w-5 text-slate-600\" />\n              <span className=\"text-sm font-medium text-slate-900\">Connection Issues</span>\n            </div>\n            <span className=\"font-semibold text-slate-900\">{iptvData.issues}</span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2119},"client/src/components/dashboard/KPICards.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Server, Wifi, Users, AlertTriangle, TrendingUp, TrendingDown } from \"lucide-react\";\n\nexport default function KPICards() {\n  const { data: overview, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard/overview\"],\n    refetchInterval: 5000,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n        {[1, 2, 3, 4].map((i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"p-6\">\n              <div className=\"h-20 bg-slate-200 rounded\" />\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const serverMetrics = overview?.systemMetrics?.find((m: any) => m.systemType === \"server\") || {};\n  const networkMetrics = overview?.networkPerformance || {};\n  const alertsCount = overview?.alertsCount || 0;\n\n  const cards = [\n    {\n      title: \"Server Uptime\",\n      value: `${serverMetrics.uptime?.toFixed(1) || '99.8'}%`,\n      trend: \"+0.2%\",\n      trendUp: true,\n      icon: Server,\n      bgColor: \"bg-green-100\",\n      iconColor: \"text-green-600\",\n      trendColor: \"text-green-600\",\n    },\n    {\n      title: \"Network Load\",\n      value: `${networkMetrics.currentLoad?.toFixed(0) || '73'}%`,\n      trend: \"+5.1%\",\n      trendUp: true,\n      icon: Wifi,\n      bgColor: \"bg-yellow-100\",\n      iconColor: \"text-yellow-600\",\n      trendColor: \"text-yellow-600\",\n    },\n    {\n      title: \"Active Guests\",\n      value: networkMetrics.activeGuests?.toString() || \"287\",\n      trend: \"+12.3%\",\n      trendUp: true,\n      icon: Users,\n      bgColor: \"bg-blue-100\",\n      iconColor: \"text-blue-600\",\n      trendColor: \"text-blue-600\",\n    },\n    {\n      title: \"System Alerts\",\n      value: alertsCount.toString(),\n      trend: \"-2\",\n      trendUp: false,\n      icon: AlertTriangle,\n      bgColor: \"bg-red-100\",\n      iconColor: \"text-red-600\",\n      trendColor: \"text-red-600\",\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n      {cards.map((card) => (\n        <Card key={card.title} className=\"border-slate-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className={`w-12 h-12 ${card.bgColor} rounded-lg flex items-center justify-center`}>\n                <card.icon className={`${card.iconColor} h-6 w-6`} />\n              </div>\n              <div className={`flex items-center ${card.trendColor} text-sm font-medium`}>\n                {card.trendUp ? (\n                  <TrendingUp className=\"h-3 w-3 mr-1\" />\n                ) : (\n                  <TrendingDown className=\"h-3 w-3 mr-1\" />\n                )}\n                <span>{card.trend}</span>\n              </div>\n            </div>\n            <div className=\"space-y-1\">\n              <h3 className=\"text-2xl font-bold text-slate-900\">{card.value}</h3>\n              <p className=\"text-slate-600 font-medium\">{card.title}</p>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":3179},"client/src/components/dashboard/NetworkPerformance.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { TrendingUp } from \"lucide-react\";\n\nexport default function NetworkPerformance() {\n  const { data: networkHistory, isLoading } = useQuery({\n    queryKey: [\"/api/network/performance\"],\n    refetchInterval: 5000,\n  });\n\n  const { data: overview } = useQuery({\n    queryKey: [\"/api/dashboard/overview\"],\n    refetchInterval: 5000,\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Network Performance</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-48 bg-slate-100 rounded-lg animate-pulse\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const latest = overview?.networkPerformance;\n  const chartData = networkHistory?.slice(-7) || [];\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Network Performance</CardTitle>\n          <div className=\"flex items-center space-x-2 text-sm text-green-600\">\n            <TrendingUp className=\"h-4 w-4\" />\n            <span>+5.2% from yesterday</span>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"mb-4\">\n          <p className=\"text-xs text-slate-500 mb-2\">Last 24 hours</p>\n          <div className=\"h-32 bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg flex items-end justify-between p-2\">\n            {chartData.map((point: any, index: number) => (\n              <div\n                key={index}\n                className=\"w-4 bg-blue-500 rounded-t\"\n                style={{ height: `${(point.currentLoad / 100) * 100}%` }}\n              />\n            ))}\n          </div>\n          <div className=\"flex justify-between text-xs text-slate-400 mt-1\">\n            <span>00:00</span>\n            <span>04:00</span>\n            <span>08:00</span>\n            <span>12:00</span>\n            <span>16:00</span>\n            <span>20:00</span>\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm text-slate-600\">Current Load</span>\n            <span className=\"font-semibold text-slate-900\">\n              {latest?.currentLoad?.toFixed(0) || '73'}%\n            </span>\n          </div>\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm text-slate-600\">Throughput</span>\n            <span className=\"font-semibold text-slate-900\">\n              {latest?.throughput?.toFixed(1) || '1.2'}GB/s\n            </span>\n          </div>\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm text-slate-600\">Latency</span>\n            <span className=\"font-semibold text-slate-900\">\n              {latest?.latency || '12'}ms\n            </span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3001},"client/src/components/dashboard/RecentAlerts.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Wifi, Tv, Shield, Slash } from \"lucide-react\";\n\nconst alertIcons = {\n  wifi: Wifi,\n  iptv: Tv,\n  security: Shield\n};\n\nconst severityColors = {\n  info: \"bg-blue-100 text-blue-700\",\n  medium: \"bg-yellow-100 text-yellow-700\",\n  high: \"bg-red-100 text-red-700\",\n  critical: \"bg-red-100 text-red-700\"\n};\n\nconst statusColors = {\n  open: \"bg-gray-100 text-gray-700\",\n  investigating: \"bg-blue-100 text-blue-700\",\n  in_progress: \"bg-yellow-100 text-yellow-700\",\n  resolved: \"bg-green-100 text-green-700\"\n};\n\nexport default function RecentAlerts() {\n  const { data: alerts, isLoading } = useQuery({\n    queryKey: [\"/api/alerts\"],\n    refetchInterval: 30000 // Refresh every 30 seconds\n  });\n\n  const { data: systems } = useQuery({\n    queryKey: [\"/api/systems\"]\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-16 bg-slate-200 rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"border border-slate-200\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold text-slate-900\">Recent Alerts</CardTitle>\n          <Button variant=\"link\" className=\"text-vigon-blue hover:text-vigon-dark p-0\">\n            View All\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"border-b border-slate-200\">\n                <th className=\"text-left py-3 text-sm font-medium text-slate-600\">System</th>\n                <th className=\"text-left py-3 text-sm font-medium text-slate-600\">Alert</th>\n                <th className=\"text-left py-3 text-sm font-medium text-slate-600\">Severity</th>\n                <th className=\"text-left py-3 text-sm font-medium text-slate-600\">Time</th>\n                <th className=\"text-left py-3 text-sm font-medium text-slate-600\">Status</th>\n              </tr>\n            </thead>\n            <tbody>\n              {alerts?.slice(0, 5).map((alert) => {\n                const system = systems?.find(s => s.id === alert.systemId);\n                const systemType = system?.type || 'wifi';\n                const IconComponent = alertIcons[systemType as keyof typeof alertIcons] || Wifi;\n                \n                return (\n                  <tr key={alert.id} className=\"border-b border-slate-100\">\n                    <td className=\"py-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <IconComponent className={`h-4 w-4 ${\n                          alert.severity === 'high' || alert.severity === 'critical' ? 'text-red-500' :\n                          alert.severity === 'medium' ? 'text-yellow-500' :\n                          'text-green-500'\n                        }`} />\n                        <span className=\"text-sm font-medium text-slate-900\">\n                          {system?.name || 'Unknown System'}\n                        </span>\n                      </div>\n                    </td>\n                    <td className=\"py-3 text-sm text-slate-600\">{alert.message}</td>\n                    <td className=\"py-3\">\n                      <Badge className={severityColors[alert.severity as keyof typeof severityColors]}>\n                        {alert.severity.charAt(0).toUpperCase() + alert.severity.slice(1)}\n                      </Badge>\n                    </td>\n                    <td className=\"py-3 text-sm text-slate-500\">\n                      {alert.createdAt ? Slash(new Date(alert.createdAt), { addSuffix: true }) : 'Unknown'}\n                    </td>\n                    <td className=\"py-3\">\n                      <Badge className={statusColors[alert.status as keyof typeof statusColors]}>\n                        {alert.status.replace('_', ' ').split(' ').map(word => \n                          word.charAt(0).toUpperCase() + word.slice(1)\n                        ).join(' ')}\n                      </Badge>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n          \n          {!alerts?.length && (\n            <div className=\"text-center py-8 text-slate-500\">\n              No alerts at this time\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4771},"client/src/components/dashboard/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  LayoutDashboard, \n  Tv, \n  Wifi, \n  Shield, \n  Server, \n  Leaf, \n  AlertTriangle, \n  BarChart3, \n  Settings \n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: LayoutDashboard },\n  { name: \"IPTV Systems\", href: \"/iptv\", icon: Tv },\n  { name: \"WiFi Network\", href: \"/wifi\", icon: Wifi },\n  { name: \"Security Systems\", href: \"/security\", icon: Shield },\n  { name: \"Infrastructure\", href: \"/infrastructure\", icon: Server },\n  { name: \"Sustainability\", href: \"/sustainability\", icon: Leaf },\n  { name: \"Alerts\", href: \"/alerts\", icon: AlertTriangle },\n  { name: \"Analytics\", href: \"/analytics\", icon: BarChart3 },\n  { name: \"Settings\", href: \"/settings\", icon: Settings },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <aside className=\"w-64 bg-white shadow-sm border-r border-slate-200\">\n      <nav className=\"p-4 space-y-2\">\n        {navigation.map((item) => {\n          const isActive = location === item.href;\n          return (\n            <Link key={item.name} href={item.href}>\n              <div className={cn(\n                \"flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors\",\n                isActive\n                  ? \"bg-vigon-blue text-white\"\n                  : \"text-slate-600 hover:bg-slate-100\"\n              )}>\n                <item.icon className=\"h-5 w-5\" />\n                <span>{item.name}</span>\n              </div>\n            </Link>\n          );\n        })}\n      </nav>\n    </aside>\n  );\n}\n","size_bytes":1607},"client/src/components/dashboard/SustainabilityMetrics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Leaf, TrendingUp, PiggyBank, Lightbulb } from \"lucide-react\";\n\nexport default function SustainabilityMetrics() {\n  const { data: powerData, isLoading } = useQuery({\n    queryKey: [\"/api/power/consumption\"],\n    refetchInterval: 30000,\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Power Consumption</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-12 bg-slate-100 rounded-lg animate-pulse\" />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const latest = powerData?.[powerData.length - 1];\n  const dailyAverage = 9.2; // Mock daily average\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Power Consumption</CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-vigon-blue hover:text-vigon-dark\">\n            Optimize\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\n            <div className=\"flex items-center space-x-3\">\n              <Leaf className=\"h-5 w-5 text-green-600\" />\n              <span className=\"text-sm font-medium text-slate-900\">Current Usage</span>\n            </div>\n            <span className=\"font-semibold text-slate-900\">\n              {latest?.totalUsage?.toFixed(1) || '8.4'} kW\n            </span>\n          </div>\n          \n          <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\n            <div className=\"flex items-center space-x-3\">\n              <TrendingUp className=\"h-5 w-5 text-green-600\" />\n              <span className=\"text-sm font-medium text-slate-900\">Daily Average</span>\n            </div>\n            <span className=\"font-semibold text-slate-900\">{dailyAverage} kW</span>\n          </div>\n          \n          <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\n            <div className=\"flex items-center space-x-3\">\n              <PiggyBank className=\"h-5 w-5 text-green-600\" />\n              <span className=\"text-sm font-medium text-slate-900\">Potential Savings</span>\n            </div>\n            <span className=\"font-semibold text-green-600\">\n              {latest?.potentialSavings || '12'}%\n            </span>\n          </div>\n        </div>\n        \n        {latest?.recommendations?.[0] && (\n          <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n            <div className=\"flex items-start space-x-2\">\n              <Lightbulb className=\"h-4 w-4 text-blue-600 mt-0.5\" />\n              <div>\n                <p className=\"text-sm text-blue-800 font-medium\">AI Recommendation</p>\n                <p className=\"text-xs text-blue-700 mt-1\">{latest.recommendations[0]}</p>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3249},"client/src/components/dashboard/SystemStatus.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Server, Database, Wifi, Shield, CheckCircle, AlertTriangle } from \"lucide-react\";\n\nconst systemIcons = {\n  server: Server,\n  database: Database,\n  wifi: Wifi,\n  security: Shield,\n};\n\nconst statusColors = {\n  healthy: \"bg-green-50 border-green-200\",\n  warning: \"bg-yellow-50 border-yellow-200\",\n  critical: \"bg-red-50 border-red-200\",\n};\n\nconst statusBadges = {\n  healthy: \"bg-green-100 text-green-700\",\n  warning: \"bg-yellow-100 text-yellow-700\",\n  critical: \"bg-red-100 text-red-700\",\n};\n\nexport default function SystemStatus() {\n  const { data: overview, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard/overview\"],\n    refetchInterval: 5000,\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>System Status</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"h-16 bg-slate-100 rounded-lg animate-pulse\" />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const systems = overview?.systemMetrics || [];\n  const healthyCount = systems.filter((s: any) => s.status === \"healthy\").length;\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>System Status</CardTitle>\n          <div className=\"flex items-center space-x-2 text-sm text-green-600\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n            <span>{healthyCount}/{systems.length} Systems Operational</span>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {systems.map((system: any) => {\n            const IconComponent = systemIcons[system.systemType as keyof typeof systemIcons] || Server;\n            return (\n              <div\n                key={system.id}\n                className={`flex items-center justify-between p-4 rounded-lg border ${\n                  statusColors[system.status as keyof typeof statusColors]\n                }`}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <IconComponent className={`h-5 w-5 ${\n                    system.status === \"healthy\" ? \"text-green-600\" :\n                    system.status === \"warning\" ? \"text-yellow-600\" : \"text-red-600\"\n                  }`} />\n                  <div>\n                    <p className=\"font-medium text-slate-900\">{system.systemName}</p>\n                    <p className=\"text-sm text-slate-600\">\n                      Uptime: {system.uptime?.toFixed(1)}%\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Badge className={statusBadges[system.status as keyof typeof statusBadges]}>\n                    {system.status === \"healthy\" ? \"Healthy\" :\n                     system.status === \"warning\" ? \"Warning\" : \"Critical\"}\n                  </Badge>\n                  {system.status === \"healthy\" ? (\n                    <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                  ) : (\n                    <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3562},"client/src/components/dashboard/VoiceCommandModal.tsx":{"content":"import { Dialog, DialogContent } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Mic } from \"lucide-react\";\nimport { useVoiceCommand } from \"@/hooks/useVoiceCommand\";\n\nexport default function VoiceCommandModal() {\n  const { isListening, transcript, stopListening } = useVoiceCommand();\n\n  return (\n    <Dialog open={isListening} onOpenChange={() => stopListening()}>\n      <DialogContent className=\"max-w-md\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-vigon-blue rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Mic className=\"h-8 w-8 text-white animate-pulse\" />\n          </div>\n          <h3 className=\"text-xl font-semibold text-slate-900 mb-2\">Voice Command</h3>\n          <p className=\"text-slate-600 mb-4\">\n            {transcript ? `\"${transcript}\"` : \"Listening for your command...\"}\n          </p>\n          <div className=\"space-y-2 text-sm text-slate-500 mb-6\">\n            <p>\"Show WiFi performance for floor 2\"</p>\n            <p>\"What was IPTV uptime last week?\"</p>\n            <p>\"Display security camera status\"</p>\n          </div>\n          <Button \n            onClick={stopListening}\n            variant=\"destructive\"\n            className=\"bg-red-500 hover:bg-red-600\"\n          >\n            Stop Listening\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":1411},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}